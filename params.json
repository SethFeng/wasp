{"name":"Wasp","tagline":"Compact and easy to use, 'all-in-one' android network solution","body":"# 介绍\r\n通过Wasp库使用HTTP GET方式获取内容的示例介绍Wasp的使用，URL为https://api.github.com/users/sethfeng/repos\r\n使用Java interface提供HTTP API：\r\n```java\r\npublic interface GitHubService {\r\n    @GET(\"users/{user}/repos\")\r\n    void listRepos(@Path(\"user\") String user, \r\n                  Callback<List<Repo>> callback);\r\n}\r\n```\r\n创建Wasp：\r\n```java\r\nWasp wasp = new Wasp.Builder(getContext())\r\n            .setEndpoint(\"https://api.github.com\")\r\n            .build();\r\n```\r\n创建HTTP service：\r\n```\r\nGitHubService service = wasp.create(GitHubService.class);\r\n```\r\n调用HTTP service里方法发送请求：\r\n```java\r\ngitHubService.listRepos(\"sethfeng\", new Callback<List<Repo>>{\r\n  @Override\r\n  public void onSuccess(WaspResponse response, List<Repo> repo) {\r\n    // do something\r\n  }\r\n  @Override\r\n  public void onError(WaspError error) {\r\n    // handle error\r\n  }\r\n});\r\n```\r\n\r\n# API\r\n## 请求方法GET/POST\r\nHTTP请求方法使用注解标识：\r\n```java\r\n@GET(...)\r\n```\r\n```java\r\n@POST(...)\r\n```\r\n\r\n## URL组装\r\n先来看一个常见的URL组成部分：\r\n`http://example.com/index.html?name=sethfeng`\r\n```\r\nprotocol = http\r\nhost = example.com\r\npath = /index.html\r\nquery = name=sethfeng\r\n```\r\n再看Wasp对各参数的API封装：\r\n### - protocol和host\r\n使用Wasp的`EndPoint`声明，EndPoint又称baseUrl\r\n```java\r\nWasp.Builder.setEndPoint(protocol + host)\r\n```\r\n### - path\r\n使用注解`Path`设置path中的参数\r\n```java\r\n@GET(\"/repos/{id}\")\r\nvoid getRepo(@Path(\"id\") String id, \r\n            Callback<Repo> callback);\r\n```\r\n组装出的url为`https://api.github.com/repos/id`\r\n### - query\r\nquery参数设置：\r\n```java\r\n@GET(\"group/{id}/users\")\r\nvoid groupList(@Path(\"id\") int id, \r\n              @Query(\"sort\") String sort, \r\n              Callback<List<User>> callback);\r\n```\r\n组装出的url为`https://api.github.com/repos/id/users?sort=sort`\r\n当query参数为多个时，可使用`QueryMap`替代多个Query：\r\n```java\r\n@GET(\"group/{id}/users\")\r\nvoid groupList(@Path(\"id\") int id, \r\n              @Query(\"sort\") String sort, \r\n              @Query(\"limit\") int limit, \r\n              Callback<List<User>> callback);\r\n```\r\n等同于：\r\n```java\r\n@GET(\"group/{id}/users\")\r\nvoid groupList(@Path(\"id\") int id, \r\n              @QueryMap Map<String, String> query, \r\n              Callback<List<User>> callback);\r\n```\r\n相应地，query参数要封装成Map传入：\r\n```java\r\nHashMap<String, String> query = new HashMap();\r\nquery.put(\"sort\", `sort`);\r\nquery.put(\"limit\", `limit`);\r\n```\r\n组装出的url为`https://api.github.com/repos/id/users?sort=sort&limit=limit`\r\n\r\n## 解析器\r\nWasp默认使用Gson解析网络请求返回数据。若要自定义解析器，传入自定义的解析器。自定义解析器需要实现`Parser`接口。\r\n```java\r\npublic class CustomParser implements Parser {\r\n  @Override\r\n  public <T> T fromBody(String content, Type type) throws IOException { // 结果解析\r\n    ...\r\n  }\r\n  @Override\r\n  public String toBody(Object body) { // POST body组装\r\n    ...\r\n  }\r\n  @Override\r\n  public String getSupportedContentType() {\r\n    ...\r\n  }\r\n}\r\n```\r\n创建Wasp时可设置自定义的解析器：\r\n```\r\nWasp wasp = new Wasp.Builder(getContext())\r\n            .setEndpoint(\"https://api.github.com\")\r\n            .setParser(new CustomParser())\r\n            .build();\r\n```\r\n\r\n## POST请求\r\nHTTP POST请求需要处理HTTP body。`Parser.toBody()`可自定义body参数的处理。\r\n```java\r\n@POST(\"/repos/{user}/{repo}\")\r\nvoid addName(@Path(\"user\") String user,\r\n             @Path(\"repo\") String repo,\r\n             @Body String body,\r\n             Callback<Repo> callback\r\n);\r\n```\r\n发送POST请求：\r\n```java\r\ngitHubService.addName(user, repo, body, callback);\r\n```\r\n\r\n## 同步/异步\r\n异步请求使用网络库统一管理网络访问线程。若需要使用同步方式，网络请求在发起请求的线程里执行。请勿在Android主线程使用同步方式。\r\n同步接口不传入回调，直接调用接口方法获取数据。请求接口声明：\r\n```java\r\n@GET(\"users/{user}/repos\")\r\nList<Repo> listRepos(@Path(\"user\") String user);\r\n```\r\n发送请求：\r\n```java\r\nList<Repo> repos = gitHubService.listRepos(user);\r\n```\r\n\r\n## 取消异步请求\r\n在Android界面销毁时可能需要取消已经发送但还未收到结果的网络请求。与异步接口的区别仅在于接口方法返回参数不同：\r\n```java\r\n@GET(\"users/{user}/repos\")\r\nWaspRequest listRepos(@Path(\"user\") String user, \r\n                      Callback<List<Repo>> callback);\r\n```\r\n发起和取消请求：\r\n```java\r\n// 发起请求\r\nWaspRequest request = gitHubService.listRepos(user, callback);\r\n\r\n// 取消请求\r\nrequest.cancel();\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}